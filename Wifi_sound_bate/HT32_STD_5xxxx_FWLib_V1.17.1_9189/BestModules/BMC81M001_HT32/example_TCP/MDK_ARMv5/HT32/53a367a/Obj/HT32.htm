<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\HT32\53a367a\Obj\HT32.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\HT32\53a367a\Obj\HT32.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6230001: Last Updated: Mon Aug 25 14:53:02 2025
<BR><P>
<H3>Maximum Stack Usage =        424 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; rtc &rArr; Time_Regulate &rArr; BMC81M001_writeDataTcp &rArr; BMC81M001_sendATCommand &rArr; BMC81M001_writeBytes &rArr; UARTM_Write &rArr; Buffer_Write
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">ADC_IRQHandler</a><BR>
 <LI><a href="#[66]">I2C_TargetAddressConfig</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[66]">I2C_TargetAddressConfig</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[e]">ADC_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[f]">AES_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[17]">BFTM0_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[18]">BFTM1_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[26]">BootProcess</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[d]">COMP_DAC_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[9]">EVWUP_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[12]">GPTM0_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from ht32f5xxxx_01_it.o(.text.HardFault_Handler) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[19]">I2C0_IRQHandler</a> from i2c_master.o(.text.I2C0_IRQHandler) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[1a]">I2C1_IRQHandler</a> from i2c_master.o(.text.I2C1_IRQHandler) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[22]">I2S_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[6]">LVD_BOD_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[10]">MCTM0_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from ht32f5xxxx_01_it.o(.text.NMI_Handler) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[24]">PDMA_CH0_1_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[25]">PDMA_CH2_5_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[15]">PWM0_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[16]">PWM1_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from ht32f5xxxx_01_it.o(.text.PendSV_Handler) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[11]">QSPI_IRQHandler</a> from spi_module.o(.text.QSPI_IRQHandler) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[7]">RTC_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[21]">SCI_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[13]">SCTM0_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[14]">SCTM1_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[1b]">SPI0_IRQHandler</a> from spi_module.o(.text.SPI0_IRQHandler) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[1c]">SPI1_IRQHandler</a> from spi_module.o(.text.SPI1_IRQHandler) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from ht32f5xxxx_01_it.o(.text.SVC_Handler) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from delay.o(.text.SysTick_Handler) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_ht32f5xxxx_03.o(.text.SystemInit) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[1f]">UART0_UART2_IRQHandler</a> from uart_module.o(.text.UART0_UART2_IRQHandler) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[20]">UART1_UART3_IRQHandler</a> from uart_module.o(.text.UART1_UART3_IRQHandler) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[1d]">USART0_IRQHandler</a> from uart_module.o(.text.USART0_IRQHandler) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[1e]">USART1_IRQHandler</a> from uart_module.o(.text.USART1_IRQHandler) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[23]">USB_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[2b]">_sputc</a> from printf6.o(i._sputc) referenced from printf6.o(i.__0sprintf$6)
 <LI><a href="#[2a]">fputc</a> from ht32_retarget.o(.text.fputc) referenced from printf6.o(i.__0printf$6)
 <LI><a href="#[29]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>BFTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>BFTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>COMP_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[9]"></a>EVWUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>GPTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>LVD_BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>MCTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PDMA_CH0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PDMA_CH2_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SCTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SCTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[2e]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[23]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[39]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[93]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[94]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[95]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[96]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[97]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[40]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_writeDataTcp
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_connectTCP
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_connectToAP
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_writeDataTcp
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_connectTCP
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_connectToAP
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_writeBytes
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_readBytes
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_sendATCommand
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_readDataTcp
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[45]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_readBytes
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_sendATCommand
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_readDataTcp
</UL>

<P><STRONG><a name="[4b]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_readDataTcp
</UL>

<P><STRONG><a name="[3f]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_writeBytes
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanUnsignedDecimal
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_readDataTcp
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_writeDataTcp
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_connectTCP
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_connectToAP
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>strspn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, strspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanUnsignedDecimal
</UL>

<P><STRONG><a name="[34]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanUnsignedDecimal
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_writeBytes
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_readBytes
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_writeDataTcp
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[36]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[30]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[9c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[38]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[3a]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[50]"></a>AFIO_GPxConfig</STRONG> (Thumb, 376 bytes, Stack size 76 bytes, ht32f5xxxx_gpio.o(.text.AFIO_GPxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SPIAPI_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTM_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_COMInit
</UL>

<P><STRONG><a name="[3b]"></a>BMC81M001_Init</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, bmc81m001.o(.text.BMC81M001_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = BMC81M001_Init &rArr; UARTM_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>BMC81M001_connectTCP</STRONG> (Thumb, 140 bytes, Stack size 232 bytes, bmc81m001.o(.text.BMC81M001_connectTCP))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = BMC81M001_connectTCP &rArr; BMC81M001_sendATCommand &rArr; BMC81M001_writeBytes &rArr; UARTM_Write &rArr; Buffer_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_sendATCommand
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43]"></a>BMC81M001_connectToAP</STRONG> (Thumb, 148 bytes, Stack size 224 bytes, bmc81m001.o(.text.BMC81M001_connectToAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = BMC81M001_connectToAP &rArr; BMC81M001_sendATCommand &rArr; BMC81M001_writeBytes &rArr; UARTM_Write &rArr; Buffer_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_sendATCommand
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>BMC81M001_readBytes</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, bmc81m001.o(.text.BMC81M001_readBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BMC81M001_readBytes &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTM_ReadByte
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTM_GetReadBufferLength
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_sendATCommand
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_readDataTcp
</UL>

<P><STRONG><a name="[4a]"></a>BMC81M001_readDataTcp</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, bmc81m001.o(.text.BMC81M001_readDataTcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BMC81M001_readDataTcp &rArr; BMC81M001_readBytes &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTM_GetReadBufferLength
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_readBytes
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanUnsignedDecimal
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>BMC81M001_sendATCommand</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, bmc81m001.o(.text.BMC81M001_sendATCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BMC81M001_sendATCommand &rArr; BMC81M001_writeBytes &rArr; UARTM_Write &rArr; Buffer_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_writeBytes
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_readBytes
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_writeDataTcp
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_connectTCP
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_connectToAP
</UL>

<P><STRONG><a name="[4c]"></a>BMC81M001_writeBytes</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, bmc81m001.o(.text.BMC81M001_writeBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BMC81M001_writeBytes &rArr; UARTM_Write &rArr; Buffer_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTM_Write
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_sendATCommand
</UL>

<P><STRONG><a name="[4e]"></a>BMC81M001_writeDataTcp</STRONG> (Thumb, 172 bytes, Stack size 224 bytes, bmc81m001.o(.text.BMC81M001_writeDataTcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = BMC81M001_writeDataTcp &rArr; BMC81M001_sendATCommand &rArr; BMC81M001_writeBytes &rArr; UARTM_Write &rArr; Buffer_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_sendATCommand
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Regulate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>BMV31T001_Init</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, bmv31t001.o(.text.BMV31T001_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BMV31T001_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>BMV31T001_isPlaying</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bmv31t001.o(.text.BMV31T001_isPlaying))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>BMV31T001_playStop</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, bmv31t001.o(.text.BMV31T001_playStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BMV31T001_playStop &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>BMV31T001_playVoice</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, bmv31t001.o(.text.BMV31T001_playVoice))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = BMV31T001_playVoice &rArr; writeCmd &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCmd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>BMV31T001_setPower</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bmv31t001.o(.text.BMV31T001_setPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BMV31T001_setPower &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>BMV31T001_setVolume</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, bmv31t001.o(.text.BMV31T001_setVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BMV31T001_setVolume &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>Buffer_GetLength</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32_usbd_class.o(.text.Buffer_GetLength))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTM_Write
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTM_GetReadBufferLength
</UL>

<P><STRONG><a name="[72]"></a>Buffer_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32_usbd_class.o(.text.Buffer_Init))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTM_Init
</UL>

<P><STRONG><a name="[77]"></a>Buffer_ReadByte</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ht32_usbd_class.o(.text.Buffer_ReadByte))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UARTM_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTM_ReadByte
</UL>

<P><STRONG><a name="[78]"></a>Buffer_Write</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ht32_usbd_class.o(.text.Buffer_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Buffer_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTM_Write
</UL>

<P><STRONG><a name="[86]"></a>Buffer_WriteByte</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ht32_usbd_class.o(.text.Buffer_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Buffer_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UARTM_IRQHandler
</UL>

<P><STRONG><a name="[83]"></a>Buffer_isEmpty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32_usbd_class.o(.text.Buffer_isEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UARTM_IRQHandler
</UL>

<P><STRONG><a name="[79]"></a>CKCU_GetPeripFrequency</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, ht32f5xxxx_ckcu.o(.text.CKCU_GetPeripFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CKCU_GetPeripFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[59]"></a>CKCU_PeripClockConfig</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ht32f5xxxx_ckcu.o(.text.CKCU_PeripClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTM_Init
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_COMInit
</UL>

<P><STRONG><a name="[7d]"></a>GPIO_ClearOutBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(.text.GPIO_ClearOutBits))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SPIAPI_IRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>GPIO_DirectionConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(.text.GPIO_DirectionConfig))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SPIAPI_IRQHandler
</UL>

<P><STRONG><a name="[73]"></a>GPIO_PullResistorConfig</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ht32f5xxxx_gpio.o(.text.GPIO_PullResistorConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PullResistorConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTM_Init
</UL>

<P><STRONG><a name="[58]"></a>HT32F_DVB_COMInit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ht32_board.o(.text.HT32F_DVB_COMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HT32F_DVB_COMInit &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxRxCmd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETARGET_Configuration
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, i2c_master.o(.text.I2C0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C0_IRQHandler &rArr; I2CMaster_IRQHandler &rArr; I2C_ReadRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMaster_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_master.o(.text.I2C1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C1_IRQHandler &rArr; I2CMaster_IRQHandler &rArr; I2C_ReadRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMaster_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2CMaster_IRQHandler</STRONG> (Thumb, 496 bytes, Stack size 24 bytes, i2c_master.o(.text.I2CMaster_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2CMaster_IRQHandler &rArr; I2C_ReadRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AckCmd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadRegister
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TargetAddressConfig
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearFlag
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[60]"></a>I2C_AckCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_i2c.o(.text.I2C_AckCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMaster_IRQHandler
</UL>

<P><STRONG><a name="[5e]"></a>I2C_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_i2c.o(.text.I2C_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMaster_IRQHandler
</UL>

<P><STRONG><a name="[65]"></a>I2C_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_i2c.o(.text.I2C_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMaster_IRQHandler
</UL>

<P><STRONG><a name="[61]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_i2c.o(.text.I2C_GenerateSTOP))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMaster_IRQHandler
</UL>

<P><STRONG><a name="[62]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_i2c.o(.text.I2C_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMaster_IRQHandler
</UL>

<P><STRONG><a name="[64]"></a>I2C_IntConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_i2c.o(.text.I2C_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMaster_IRQHandler
</UL>

<P><STRONG><a name="[5d]"></a>I2C_ReadRegister</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, ht32f5xxxx_i2c.o(.text.I2C_ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMaster_IRQHandler
</UL>

<P><STRONG><a name="[5f]"></a>I2C_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f5xxxx_i2c.o(.text.I2C_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMaster_IRQHandler
</UL>

<P><STRONG><a name="[63]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_i2c.o(.text.I2C_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMaster_IRQHandler
</UL>

<P><STRONG><a name="[66]"></a>I2C_TargetAddressConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ht32f5xxxx_i2c.o(.text.I2C_TargetAddressConfig))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TargetAddressConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMaster_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TargetAddressConfig
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>QSPI_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_module.o(.text.QSPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = QSPI_IRQHandler &rArr; _SPIAPI_IRQHandler &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SPIAPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>RETARGET_Configuration</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ht32_retarget.o(.text.RETARGET_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = RETARGET_Configuration &rArr; HT32F_DVB_COMInit &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_COMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>SERIAL_PutChar</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ht32_serial.o(.text.SERIAL_PutChar))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1b]"></a>SPI0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_module.o(.text.SPI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SPI0_IRQHandler &rArr; _SPIAPI_IRQHandler &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SPIAPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_module.o(.text.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SPI1_IRQHandler &rArr; _SPIAPI_IRQHandler &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SPIAPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>SPI_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(.text.SPI_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SPIAPI_IRQHandler
</UL>

<P><STRONG><a name="[80]"></a>SPI_GetFIFOStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(.text.SPI_GetFIFOStatus))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SPIAPI_IRQHandler
</UL>

<P><STRONG><a name="[7a]"></a>SPI_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(.text.SPI_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SPIAPI_IRQHandler
</UL>

<P><STRONG><a name="[7c]"></a>SPI_IntConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(.text.SPI_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SPIAPI_IRQHandler
</UL>

<P><STRONG><a name="[7f]"></a>SPI_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(.text.SPI_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SPIAPI_IRQHandler
</UL>

<P><STRONG><a name="[7b]"></a>SPI_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_spi.o(.text.SPI_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SPIAPI_IRQHandler
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>ScanUnsignedDecimal</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, main.o(.text.ScanUnsignedDecimal))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ScanUnsignedDecimal &rArr; BMC81M001_readDataTcp &rArr; BMC81M001_readBytes &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_readDataTcp
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Regulate
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, delay.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 364 bytes, Stack size 44 bytes, system_ht32f5xxxx_03.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>Time_Regulate</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, main.o(.text.Time_Regulate))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Time_Regulate &rArr; BMC81M001_writeDataTcp &rArr; BMC81M001_sendATCommand &rArr; BMC81M001_writeBytes &rArr; UARTM_Write &rArr; Buffer_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanUnsignedDecimal
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_writeDataTcp
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc
</UL>

<P><STRONG><a name="[1f]"></a>UART0_UART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart_module.o(.text.UART0_UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART0_UART2_IRQHandler &rArr; _UARTM_IRQHandler &rArr; Buffer_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UARTM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>UART1_UART3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart_module.o(.text.UART1_UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART1_UART3_IRQHandler &rArr; _UARTM_IRQHandler &rArr; Buffer_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UARTM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UARTM_GetReadBufferLength</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart_module.o(.text.UARTM_GetReadBufferLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTM_GetReadBufferLength
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_GetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_readBytes
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_readDataTcp
</UL>

<P><STRONG><a name="[3c]"></a>UARTM_Init</STRONG> (Thumb, 656 bytes, Stack size 40 bytes, uart_module.o(.text.UARTM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = UARTM_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxRxCmd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetTimeOutValue
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TXRXTLConfig
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_Init
</UL>

<P><STRONG><a name="[47]"></a>UARTM_ReadByte</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart_module.o(.text.UARTM_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTM_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_readBytes
</UL>

<P><STRONG><a name="[4d]"></a>UARTM_Write</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, uart_module.o(.text.UARTM_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UARTM_Write &rArr; Buffer_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_Write
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_GetLength
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_writeBytes
</UL>

<P><STRONG><a name="[1d]"></a>USART0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart_module.o(.text.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART0_IRQHandler &rArr; _UARTM_IRQHandler &rArr; Buffer_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UARTM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart_module.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART1_IRQHandler &rArr; _UARTM_IRQHandler &rArr; Buffer_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UARTM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>USART_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(.text.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UARTM_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>USART_GetFIFOStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(.text.USART_GetFIFOStatus))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UARTM_IRQHandler
</UL>

<P><STRONG><a name="[82]"></a>USART_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(.text.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UARTM_IRQHandler
</UL>

<P><STRONG><a name="[87]"></a>USART_GetIntStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(.text.USART_GetIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UARTM_IRQHandler
</UL>

<P><STRONG><a name="[5a]"></a>USART_Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ht32f5xxxx_usart.o(.text.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART_Init &rArr; CKCU_GetPeripFrequency
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPeripFrequency
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTM_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_COMInit
</UL>

<P><STRONG><a name="[76]"></a>USART_IntConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(.text.USART_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_UARTM_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTM_Write
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTM_Init
</UL>

<P><STRONG><a name="[75]"></a>USART_SetTimeOutValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(.text.USART_SetTimeOutValue))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTM_Init
</UL>

<P><STRONG><a name="[74]"></a>USART_TXRXTLConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(.text.USART_TXRXTLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTM_Init
</UL>

<P><STRONG><a name="[5b]"></a>USART_TxRxCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(.text.USART_TxRxCmd))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTM_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT32F_DVB_COMInit
</UL>

<P><STRONG><a name="[67]"></a>_SPIAPI_IRQHandler</STRONG> (Thumb, 544 bytes, Stack size 16 bytes, spi_module.o(.text._SPIAPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _SPIAPI_IRQHandler &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ClearFlag
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFIFOStatus
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlagStatus
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IntConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_IRQHandler
</UL>

<P><STRONG><a name="[51]"></a>delay_ms</STRONG> (Thumb, 312 bytes, Stack size 28 bytes, delay.o(.text.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCmd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_playStop
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_playVoice
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_setVolume
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_setPower
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_Init
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>delay_us</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, delay.o(.text.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCmd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_playStop
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_playVoice
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_setVolume
</UL>

<P><STRONG><a name="[2a]"></a>fputc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ht32_retarget.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_PutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0printf$6)
</UL>
<P><STRONG><a name="[29]"></a>main</STRONG> (Thumb, 584 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = main &rArr; rtc &rArr; Time_Regulate &rArr; BMC81M001_writeDataTcp &rArr; BMC81M001_sendATCommand &rArr; BMC81M001_writeBytes &rArr; UARTM_Write &rArr; Buffer_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_playStop
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_isPlaying
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_readDataTcp
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_playVoice
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_writeDataTcp
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_connectTCP
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_connectToAP
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_setVolume
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_setPower
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETARGET_Configuration
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[8b]"></a>rtc</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, main.o(.text.rtc))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = rtc &rArr; Time_Regulate &rArr; BMC81M001_writeDataTcp &rArr; BMC81M001_sendATCommand &rArr; BMC81M001_writeBytes &rArr; UARTM_Write &rArr; Buffer_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Regulate
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_writeDataTcp
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>__0printf$6</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf6.o(i.__0printf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9d]"></a>__1printf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0printf$6), UNUSED)

<P><STRONG><a name="[6a]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0printf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanUnsignedDecimal
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Regulate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>__0sprintf$6</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9e]"></a>__1sprintf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)

<P><STRONG><a name="[41]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_writeDataTcp
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMC81M001_connectTCP
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[9f]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[a0]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[a1]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[a2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[6b]"></a>free</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanUnsignedDecimal
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanUnsignedDecimal
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>puts</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Regulate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[70]"></a>_UARTM_IRQHandler</STRONG> (Thumb, 428 bytes, Stack size 32 bytes, uart_module.o(.text._UARTM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _UARTM_IRQHandler &rArr; Buffer_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetIntStatus
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFIFOStatus
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_isEmpty
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_ReadByte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buffer_WriteByte
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_UART3_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_UART2_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[55]"></a>writeCmd</STRONG> (Thumb, 968 bytes, Stack size 56 bytes, bmv31t001.o(.text.writeCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = writeCmd &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_playVoice
</UL>

<P><STRONG><a name="[26]"></a>BootProcess</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>_printf_core</STRONG> (Thumb, 768 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$6
</UL>

<P><STRONG><a name="[91]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[90]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2b]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf6.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0sprintf$6)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
