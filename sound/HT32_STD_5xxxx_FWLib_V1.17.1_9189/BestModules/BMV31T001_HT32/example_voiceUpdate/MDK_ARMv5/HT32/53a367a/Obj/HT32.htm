<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\HT32\53a367a\Obj\HT32.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\HT32\53a367a\Obj\HT32.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6230001: Last Updated: Mon Aug 11 13:44:49 2025
<BR><P>
<H3>Maximum Stack Usage =        220 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; BMV31T001_executeUpdate &rArr; USBSerial_write_byte &rArr; USBDClass_CDC_Tx &rArr; USBD_EPTWriteINData &rArr; _USBD_CopyMemory
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[e]">ADC_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[f]">AES_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[17]">BFTM0_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[18]">BFTM1_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[26]">BootProcess</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[d]">COMP_DAC_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[9]">EVWUP_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[12]">GPTM0_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from ht32f5xxxx_01_it.o(.text.HardFault_Handler) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[19]">I2C0_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[1a]">I2C1_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[22]">I2S_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[6]">LVD_BOD_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[10]">MCTM0_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[24]">PDMA_CH0_1_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[25]">PDMA_CH2_5_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[15]">PWM0_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[16]">PWM1_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[11]">QSPI_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[7]">RTC_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[21]">SCI_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[13]">SCTM0_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[14]">SCTM1_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[1b]">SPI0_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[1c]">SPI1_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[30]">Suspend</a> from usb_init.o(.text.Suspend) referenced from usb_init.o(.text.USB_Configuration)
 <LI><a href="#[5]">SysTick_Handler</a> from delay.o(.text.SysTick_Handler) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_ht32f5xxxx_03.o(.text.SystemInit) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[1f]">UART0_UART2_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[20]">UART1_UART3_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[1d]">USART0_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[1e]">USART1_IRQHandler</a> from startup_ht32f5xxxx_03.o(RESET) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[2c]">USBDClass_Endpoint1</a> from ht32_usbd_class.o(.text.USBDClass_Endpoint1) referenced from ht32_usbd_class.o(.text.USBDClass_Init)
 <LI><a href="#[2b]">USBDClass_Endpoint2</a> from ht32_usbd_class.o(.text.USBDClass_Endpoint2) referenced from ht32_usbd_class.o(.text.USBDClass_Init)
 <LI><a href="#[2a]">USBDClass_Endpoint3</a> from ht32_usbd_class.o(.text.USBDClass_Endpoint3) referenced from ht32_usbd_class.o(.text.USBDClass_Init)
 <LI><a href="#[2f]">USBDClass_MainRoutine</a> from ht32_usbd_class.o(.text.USBDClass_MainRoutine) referenced from ht32_usbd_class.o(.text.USBDClass_Init)
 <LI><a href="#[2d]">USBDClass_Request</a> from ht32_usbd_class.o(.text.USBDClass_Request) referenced from ht32_usbd_class.o(.text.USBDClass_Init)
 <LI><a href="#[2e]">USBDClass_Reset</a> from ht32_usbd_class.o(.text.USBDClass_Reset) referenced from ht32_usbd_class.o(.text.USBDClass_Init)
 <LI><a href="#[23]">USB_IRQHandler</a> from ht32f5xxxx_01_it.o(.text.USB_IRQHandler) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_ht32f5xxxx_03.o(RESET)
 <LI><a href="#[29]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>BFTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>BFTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>COMP_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[9]"></a>EVWUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>GPTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>LVD_BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>MCTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PDMA_CH0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PDMA_CH2_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>QSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SCTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SCTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[1f]"></a>UART0_UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[20]"></a>UART1_UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[34]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[36]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[74]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[75]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[76]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[77]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[78]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[49]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDClass_CDC_Tx
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[7a]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>AFIO_GPxConfig</STRONG> (Thumb, 376 bytes, Stack size 76 bytes, ht32f5xxxx_gpio.o(.text.AFIO_GPxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_Init
</UL>

<P><STRONG><a name="[37]"></a>BMV31T001_Init</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, bmv31t001.o(.text.BMV31T001_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BMV31T001_Init &rArr; AFIO_GPxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>BMV31T001_executeUpdate</STRONG> (Thumb, 3420 bytes, Stack size 120 bytes, bmv31t001.o(.text.BMV31T001_executeUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = BMV31T001_executeUpdate &rArr; USBSerial_write_byte &rArr; USBDClass_CDC_Tx &rArr; USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial_readBytes
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial_write_byte
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial_available
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendData
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashPageWrite
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashWaitForWriteEnd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashWriteEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43]"></a>BMV31T001_initAudioUpdate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bmv31t001.o(.text.BMV31T001_initAudioUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BMV31T001_initAudioUpdate &rArr; USBSerial_begin &rArr; USB_Serial &rArr; USB_Configuration &rArr; USBDCore_Init &rArr; USBD_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial_begin
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>BMV31T001_isUpdateBegin</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bmv31t001.o(.text.BMV31T001_isUpdateBegin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BMV31T001_isUpdateBegin &rArr; USBSerial_available
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial_available
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>BMV31T001_setPower</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bmv31t001.o(.text.BMV31T001_setPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BMV31T001_setPower &rArr; delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>CKCU_GetClockReadyStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f5xxxx_ckcu.o(.text.CKCU_GetClockReadyStatus))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configuration
</UL>

<P><STRONG><a name="[71]"></a>CKCU_PeripClockConfig</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ht32f5xxxx_ckcu.o(.text.CKCU_PeripClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Serial
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>CKCU_USBClockConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_ckcu.o(.text.CKCU_USBClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configuration
</UL>

<P><STRONG><a name="[6b]"></a>CKCU_USBPLLCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_ckcu.o(.text.CKCU_USBPLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configuration
</UL>

<P><STRONG><a name="[6a]"></a>CKCU_USBPLLInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht32f5xxxx_ckcu.o(.text.CKCU_USBPLLInit))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configuration
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>RSTCU_PeripReset</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ht32f5xxxx_rstcu.o(.text.RSTCU_PeripReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RSTCU_PeripReset
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DeInit
</UL>

<P><STRONG><a name="[30]"></a>Suspend</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_init.o(.text.Suspend))
<BR>[Address Reference Count : 1]<UL><LI> usb_init.o(.text.USB_Configuration)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, delay.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 364 bytes, Stack size 44 bytes, system_ht32f5xxxx_03.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USBDClass_CDC_Tx</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, ht32_usbd_class.o(.text.USBDClass_CDC_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBDClass_CDC_Tx &rArr; USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial_write_byte
</UL>

<P><STRONG><a name="[6f]"></a>USBDClass_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ht32_usbd_class.o(.text.USBDClass_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBDClass_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configuration
</UL>

<P><STRONG><a name="[70]"></a>USBDCore_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32_usbd_core.o(.text.USBDCore_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configured
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Connected
</UL>

<P><STRONG><a name="[4b]"></a>USBDCore_IRQHandler</STRONG> (Thumb, 1132 bytes, Stack size 40 bytes, ht32_usbd_core.o(.text.USBDCore_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USBDCore_IRQHandler &rArr; USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetAddress
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTSetHalt
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetHalt
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEPTnINTNumber
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearINT
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTSendSTALL
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetBufferLen
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearDTG
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTClearHalt
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ReadSETUPData
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTGetINT
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTInit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerOn
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DeInit
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerOff
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClearINT
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetINT
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EnableINT
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadOUTData
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[5e]"></a>USBDCore_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ht32_usbd_core.o(.text.USBDCore_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBDCore_Init &rArr; USBD_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configuration
</UL>

<P><STRONG><a name="[60]"></a>USBDCore_MainRoutine</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ht32_usbd_core.o(.text.USBDCore_MainRoutine))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBDCore_MainRoutine &rArr; USBD_PowerUp
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PowerUp
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Serial
</UL>

<P><STRONG><a name="[6e]"></a>USBDDesc_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ht32_usbd_descriptor.o(.text.USBDDesc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBDDesc_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configuration
</UL>

<P><STRONG><a name="[4d]"></a>USBD_ClearINT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(.text.USBD_ClearINT))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[72]"></a>USBD_DPpullupCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(.text.USBD_DPpullupCmd))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Serial
</UL>

<P><STRONG><a name="[4f]"></a>USBD_DeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht32f5xxxx_usbd.o(.text.USBD_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_DeInit &rArr; RSTCU_PeripReset
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSTCU_PeripReset
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[56]"></a>USBD_EPTClearDTG</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(.text.USBD_EPTClearDTG))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[55]"></a>USBD_EPTClearHalt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(.text.USBD_EPTClearHalt))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[59]"></a>USBD_EPTClearINT</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(.text.USBD_EPTClearINT))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[57]"></a>USBD_EPTGetBufferLen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(.text.USBD_EPTGetBufferLen))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[5b]"></a>USBD_EPTGetHalt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(.text.USBD_EPTGetHalt))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[53]"></a>USBD_EPTGetINT</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(.text.USBD_EPTGetINT))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[51]"></a>USBD_EPTInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ht32f5xxxx_usbd.o(.text.USBD_EPTInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_EPTInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[4a]"></a>USBD_EPTReadOUTData</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ht32f5xxxx_usbd.o(.text.USBD_EPTReadOUTData))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBD_EPTReadOUTData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_CopyMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDClass_Endpoint3
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[58]"></a>USBD_EPTSendSTALL</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(.text.USBD_EPTSendSTALL))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[5c]"></a>USBD_EPTSetHalt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(.text.USBD_EPTSetHalt))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[48]"></a>USBD_EPTWriteINData</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ht32f5xxxx_usbd.o(.text.USBD_EPTWriteINData))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_USBD_CopyMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDClass_CDC_Tx
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDClass_MainRoutine
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[52]"></a>USBD_EnableINT</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(.text.USBD_EnableINT))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Serial_rx
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[5a]"></a>USBD_GetEPTnINTNumber</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(.text.USBD_GetEPTnINTNumber))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[4c]"></a>USBD_GetINT</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(.text.USBD_GetINT))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[5f]"></a>USBD_Init</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, ht32f5xxxx_usbd.o(.text.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_Init
</UL>

<P><STRONG><a name="[4e]"></a>USBD_PowerOff</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(.text.USBD_PowerOff))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[50]"></a>USBD_PowerOn</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(.text.USBD_PowerOn))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[61]"></a>USBD_PowerUp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ht32f5xxxx_usbd.o(.text.USBD_PowerUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_PowerUp
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_MainRoutine
</UL>

<P><STRONG><a name="[54]"></a>USBD_ReadSETUPData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(.text.USBD_ReadSETUPData))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[5d]"></a>USBD_SetAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_usbd.o(.text.USBD_SetAddress))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>

<P><STRONG><a name="[3d]"></a>USBSerial_available</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usb_vcp.o(.text.USBSerial_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBSerial_available
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CDC_avilable
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_executeUpdate
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_isUpdateBegin
</UL>

<P><STRONG><a name="[44]"></a>USBSerial_begin</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usb_vcp.o(.text.USBSerial_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USBSerial_begin &rArr; USB_Serial &rArr; USB_Configuration &rArr; USBDCore_Init &rArr; USBD_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Serial
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_initAudioUpdate
</UL>

<P><STRONG><a name="[3e]"></a>USBSerial_readBytes</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usb_vcp.o(.text.USBSerial_readBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBSerial_readBytes &rArr; USB_Serial_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Serial_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_executeUpdate
</UL>

<P><STRONG><a name="[3b]"></a>USBSerial_write_byte</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usb_vcp.o(.text.USBSerial_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USBSerial_write_byte &rArr; USBDClass_CDC_Tx &rArr; USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configured
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Connected
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDClass_CDC_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_executeUpdate
</UL>

<P><STRONG><a name="[64]"></a>USB_CDC_avilable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32_usbd_class.o(.text.USB_CDC_avilable))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial_available
</UL>

<P><STRONG><a name="[69]"></a>USB_Configuration</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, usb_init.o(.text.USB_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_Configuration &rArr; USBDCore_Init &rArr; USBD_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_USBClockConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClockReadyStatus
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_USBPLLCmd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_USBPLLInit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDDesc_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDClass_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Serial
</UL>

<P><STRONG><a name="[68]"></a>USB_Configured</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ht32_usbd_class.o(.text.USB_Configured))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Configured
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial_write_byte
</UL>

<P><STRONG><a name="[67]"></a>USB_Connected</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ht32_usbd_class.o(.text.USB_Connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Connected
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial_write_byte
</UL>

<P><STRONG><a name="[23]"></a>USB_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ht32f5xxxx_01_it.o(.text.USB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USB_IRQHandler &rArr; USBDCore_IRQHandler &rArr; USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>USB_Serial</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usb_init.o(.text.USB_Serial))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_Serial &rArr; USB_Configuration &rArr; USBDCore_Init &rArr; USBD_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBDCore_MainRoutine
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_DPpullupCmd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Configuration
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial_begin
</UL>

<P><STRONG><a name="[66]"></a>USB_Serial_rx</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ht32_usbd_class.o(.text.USB_Serial_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_Serial_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EnableINT
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBSerial_readBytes
</UL>

<P><STRONG><a name="[39]"></a>delay_ms</STRONG> (Thumb, 312 bytes, Stack size 28 bytes, delay.o(.text.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_executeUpdate
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_setPower
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_Init
</UL>

<P><STRONG><a name="[3c]"></a>delay_us</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, delay.o(.text.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendData
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashPageWrite
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashWaitForWriteEnd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashWriteEnable
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_executeUpdate
</UL>

<P><STRONG><a name="[29]"></a>main</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = main &rArr; BMV31T001_executeUpdate &rArr; USBSerial_write_byte &rArr; USBDClass_CDC_Tx &rArr; USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_executeUpdate
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_isUpdateBegin
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_initAudioUpdate
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_setPower
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[7b]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[7c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[7d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3f]"></a>SPIFlashWriteEnable</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, bmv31t001.o(.text.SPIFlashWriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPIFlashWriteEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashPageWrite
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_executeUpdate
</UL>

<P><STRONG><a name="[40]"></a>SPIFlashWaitForWriteEnd</STRONG> (Thumb, 472 bytes, Stack size 40 bytes, bmv31t001.o(.text.SPIFlashWaitForWriteEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPIFlashWaitForWriteEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashPageWrite
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_executeUpdate
</UL>

<P><STRONG><a name="[41]"></a>SPIFlashPageWrite</STRONG> (Thumb, 1552 bytes, Stack size 48 bytes, bmv31t001.o(.text.SPIFlashPageWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPIFlashPageWrite &rArr; SPIFlashWaitForWriteEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashWaitForWriteEnd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlashWriteEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_executeUpdate
</UL>

<P><STRONG><a name="[42]"></a>sendData</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, bmv31t001.o(.text.sendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sendData
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMV31T001_executeUpdate
</UL>

<P><STRONG><a name="[2a]"></a>USBDClass_Endpoint3</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ht32_usbd_class.o(.text.USBDClass_Endpoint3))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBDClass_Endpoint3 &rArr; USBD_EPTReadOUTData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadOUTData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ht32_usbd_class.o(.text.USBDClass_Init)
</UL>
<P><STRONG><a name="[2b]"></a>USBDClass_Endpoint2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32_usbd_class.o(.text.USBDClass_Endpoint2))
<BR>[Address Reference Count : 1]<UL><LI> ht32_usbd_class.o(.text.USBDClass_Init)
</UL>
<P><STRONG><a name="[2c]"></a>USBDClass_Endpoint1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32_usbd_class.o(.text.USBDClass_Endpoint1))
<BR>[Address Reference Count : 1]<UL><LI> ht32_usbd_class.o(.text.USBDClass_Init)
</UL>
<P><STRONG><a name="[2d]"></a>USBDClass_Request</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, ht32_usbd_class.o(.text.USBDClass_Request))
<BR>[Address Reference Count : 1]<UL><LI> ht32_usbd_class.o(.text.USBDClass_Init)
</UL>
<P><STRONG><a name="[2e]"></a>USBDClass_Reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32_usbd_class.o(.text.USBDClass_Reset))
<BR>[Address Reference Count : 1]<UL><LI> ht32_usbd_class.o(.text.USBDClass_Init)
</UL>
<P><STRONG><a name="[2f]"></a>USBDClass_MainRoutine</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ht32_usbd_class.o(.text.USBDClass_MainRoutine))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBDClass_MainRoutine &rArr; USBD_EPTWriteINData &rArr; _USBD_CopyMemory
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ht32_usbd_class.o(.text.USBDClass_Init)
</UL>
<P><STRONG><a name="[26]"></a>BootProcess</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, startup_ht32f5xxxx_03.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_03.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>_USBD_CopyMemory</STRONG> (Thumb, 708 bytes, Stack size 28 bytes, ht32f5xxxx_usbd.o(.text._USBD_CopyMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _USBD_CopyMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTReadOUTData
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_EPTWriteINData
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
